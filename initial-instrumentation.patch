diff --git a/src/conn.c b/src/conn.c
index 1b031bc..ac54ffb 100644
--- a/src/conn.c
+++ b/src/conn.c
@@ -28,13 +28,16 @@ static void conn_write_cb(struct transport *transport, int status)
 		goto abort;
 	}
 
+	oadd("conn-state sm_id: %lu conn_write_done |", c->sm_id);
 	buffer__reset(&c->write);
 	buffer__advance(&c->write, message__sizeof(&c->response)); /* Header */
 
+	oadd("gw-state sm_id: %lu gw_resume |", c->gateway.sm_id);
 	rv = gateway__resume(&c->gateway, &finished);
 	if (rv != 0) {
 		goto abort;
 	}
+	oadd("gw-state sm_id: %lu gw_resume_done |", c->gateway.sm_id);
 	if (!finished) {
 		return;
 	}
@@ -74,6 +77,8 @@ static void gateway_handle_cb(struct handle *req,
 		goto abort;
 	}
 
+	oadd("gw-state sm_id: %lu gw_handle_done |", c->gateway.sm_id);
+
 	n = buffer__offset(&c->write) - message__sizeof(&c->response);
 	assert(n % 8 == 0);
 
@@ -88,6 +93,7 @@ static void gateway_handle_cb(struct handle *req,
 	buf.base = buffer__cursor(&c->write, 0);
 	buf.len = buffer__offset(&c->write);
 
+	oadd("conn-state sm_id: %lu conn_write_started |", c->sm_id);
 	rv = transport__write(&c->transport, &buf, conn_write_cb);
 	if (rv != 0) {
 		tracef("transport write failed %d", rv);
@@ -147,12 +153,16 @@ static void read_request_cb(struct transport *transport, int status)
 	buffer__reset(&c->write);
 	buffer__advance(&c->write, message__sizeof(&c->response)); /* Header */
 
+	oadd("conn-state sm_id: %lu conn_req_read_ok |", c->sm_id);
+
 	switch (c->request.type) {
 		case DQLITE_REQUEST_CONNECT:
 			raft_connect(c);
 			return;
 	}
 
+	oadd("conn-to-gw conn_id: %lu, gw_id: %lu |", c->sm_id, c->gateway.sm_id);
+	oadd("gw-state sm_id: %lu gw_handle_started |", c->gateway.sm_id);
 	rv = gateway__handle(&c->gateway, &c->handle, c->request.type,
 			     c->request.schema, &c->write, gateway_handle_cb);
 	if (rv != 0) {
@@ -177,6 +187,7 @@ static int read_request(struct conn *c)
 	if (c->request.words == 0) {
 		return 0;
 	}
+	oadd("conn-state sm_id: %lu conn_req_read |", c->sm_id);
 	rv = transport__read(&c->transport, &buf, read_request_cb);
 	if (rv != 0) {
 		tracef("transport read failed %d", rv);
@@ -203,6 +214,7 @@ static void read_message_cb(struct transport *transport, int status)
 
 	rv = message__decode(&cursor, &c->request);
 	assert(rv == 0); /* Can't fail, we know we have enough bytes */
+	oadd("conn-state sm_id: %lu conn_msg_read_ok |", c->sm_id);
 
 	rv = read_request(c);
 	if (rv != 0) {
@@ -222,6 +234,7 @@ static int read_message(struct conn *c)
 		tracef("init read failed %d", rv);
 		return rv;
 	}
+	oadd("conn-state sm_id: %lu conn_msg_read |", c->sm_id);
 	rv = transport__read(&c->transport, &buf, read_message_cb);
 	if (rv != 0) {
 		tracef("transport read failed %d", rv);
@@ -248,6 +261,7 @@ static void read_protocol_cb(struct transport *transport, int status)
 	rv = uint64__decode(&cursor, &c->protocol);
 	assert(rv == 0); /* Can't fail, we know we have enough bytes */
 
+	oadd("conn-state sm_id: %lu conn_proto_read_ok |", c->sm_id);
 	if (c->protocol != DQLITE_PROTOCOL_VERSION &&
 	    c->protocol != DQLITE_PROTOCOL_VERSION_LEGACY) {
 		/* errorf(c->logger, "unknown protocol version: %lx", */
@@ -258,6 +272,7 @@ static void read_protocol_cb(struct transport *transport, int status)
 		goto abort;
 	}
 	c->gateway.protocol = c->protocol;
+	oadd("conn-state sm_id: %lu conn_proto_check_ok |", c->sm_id);
 
 	rv = read_message(c);
 	if (rv != 0) {
@@ -279,6 +294,8 @@ static int read_protocol(struct conn *c)
 		tracef("init read failed %d", rv);
 		return rv;
 	}
+
+	oadd("conn-state sm_id: %lu conn_proto_read |", c->sm_id);
 	rv = transport__read(&c->transport, &buf, read_protocol_cb);
 	if (rv != 0) {
 		tracef("transport read failed %d", rv);
@@ -300,6 +317,10 @@ int conn__start(struct conn *c,
 	int rv;
 	(void)loop;
 	tracef("conn start");
+
+	c->sm_id = id_generate();
+	oadd("conn-state sm_id: %lu conn_started |", c->sm_id);
+
 	rv = transport__init(&c->transport, stream);
 	if (rv != 0) {
 		tracef("conn start - transport init failed %d", rv);
@@ -340,6 +361,7 @@ err:
 void conn__stop(struct conn *c)
 {
 	tracef("conn stop");
+	oadd("conn-state sm_id: %lu conn_stopped |", c->sm_id);
 	if (c->closed) {
 		return;
 	}
diff --git a/src/conn.h b/src/conn.h
index fb93c8f..77ff535 100644
--- a/src/conn.h
+++ b/src/conn.h
@@ -36,6 +36,8 @@ struct conn
 	struct handle handle;
 	bool closed;
 	queue queue;
+
+	uint64_t sm_id;
 };
 
 /**
diff --git a/src/gateway.c b/src/gateway.c
index 61288a1..b0f9ec3 100644
--- a/src/gateway.c
+++ b/src/gateway.c
@@ -31,6 +31,8 @@ void gateway__init(struct gateway *g,
 	g->protocol = DQLITE_PROTOCOL_VERSION;
 	g->client_id = 0;
 	g->random_state = seed;
+	g->sm_id = id_generate();
+	oadd("gw-state sm_id: %lu gw_inited |", g->sm_id);
 }
 
 void gateway__leader_close(struct gateway *g, int reason)
@@ -89,6 +91,8 @@ void gateway__close(struct gateway *g)
 		return;
 	}
 
+	oadd("gw-state sm_id: %lu gw_closed |", g->sm_id);
+
 	gateway__leader_close(g, RAFT_SHUTDOWN);
 }
 
diff --git a/src/gateway.h b/src/gateway.h
index dd07fdd..3a68767 100644
--- a/src/gateway.h
+++ b/src/gateway.h
@@ -37,6 +37,7 @@ struct gateway
 	uint64_t protocol;           /* Protocol format version */
 	uint64_t client_id;
 	struct id_state random_state; /* For generating IDs */
+	uint64_t sm_id;
 };
 
 void gateway__init(struct gateway *g,
diff --git a/src/metrics.c b/src/metrics.c
index f049e58..2f6cc63 100644
--- a/src/metrics.c
+++ b/src/metrics.c
@@ -3,6 +3,7 @@
 #include "./lib/assert.h"
 
 #include "metrics.h"
+#include "utils.h"
 
 void dqlite__metrics_init(struct dqlite__metrics *m)
 {
@@ -11,3 +12,10 @@ void dqlite__metrics_init(struct dqlite__metrics *m)
 	m->requests = 0;
 	m->duration = 0;
 }
+
+#include <stdatomic.h>
+uint64_t id_generate(void)
+{
+	static int64_t an_id = 0;
+	return (uint64_t) __sync_add_and_fetch(&an_id, 1);
+}
diff --git a/src/server.c b/src/server.c
index 75b9e8d..cc0b79f 100644
--- a/src/server.c
+++ b/src/server.c
@@ -623,6 +623,7 @@ static void listenCb(uv_stream_t *listener, int status)
 	if (conn == NULL) {
 		goto err;
 	}
+
 	rv = conn__start(conn, &t->config, &t->loop, &t->registry, &t->raft,
 			 stream, &t->raft_transport, seed, destroy_conn);
 	if (rv != 0) {
diff --git a/src/tracing.h b/src/tracing.h
index 652e853..cef3258 100644
--- a/src/tracing.h
+++ b/src/tracing.h
@@ -51,6 +51,7 @@ enum dqlite_trace_level {
 };
 
 #define tracef(...) tracef0(TRACE_DEBUG, __VA_ARGS__)
+#define oadd(...) tracef("@@@ " __VA_ARGS__)
 
 /* Enable tracing if the appropriate env variable is set, or disable tracing. */
 DQLITE_VISIBLE_TO_TESTS void dqliteTracingMaybeEnable(bool enabled);
diff --git a/src/utils.h b/src/utils.h
index d711a48..92d2f25 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -13,4 +13,6 @@
 
 #define DBG() fprintf(stderr, "%s:%d\n", __func__, __LINE__)
 
+uint64_t id_generate(void);
+
 #endif /* DQLITE_UTILS_H_ */
